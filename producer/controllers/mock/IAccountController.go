// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockController

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// IAccountController is an autogenerated mock type for the IAccountController type
type IAccountController struct {
	mock.Mock
}

// CloseAccount provides a mock function with given fields: c
func (_m *IAccountController) CloseAccount(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositFund provides a mock function with given fields: c
func (_m *IAccountController) DepositFund(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenAccount provides a mock function with given fields: c
func (_m *IAccountController) OpenAccount(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithdrawFund provides a mock function with given fields: c
func (_m *IAccountController) WithdrawFund(c *fiber.Ctx) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fiber.Ctx) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIAccountController interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAccountController creates a new instance of IAccountController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAccountController(t mockConstructorTestingTNewIAccountController) *IAccountController {
	mock := &IAccountController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
