// Code generated by mockery v2.20.0. DO NOT EDIT.

package mockService

import (
	commands "producer/commands"

	mock "github.com/stretchr/testify/mock"
)

// IAccountService is an autogenerated mock type for the IAccountService type
type IAccountService struct {
	mock.Mock
}

// CloseAccount provides a mock function with given fields: command
func (_m *IAccountService) CloseAccount(command commands.CloseAccountCommand) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(commands.CloseAccountCommand) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositFund provides a mock function with given fields: command
func (_m *IAccountService) DepositFund(command commands.DepositFundCommand) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(commands.DepositFundCommand) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenAccount provides a mock function with given fields: command
func (_m *IAccountService) OpenAccount(command commands.OpenAccountCommand) (string, error) {
	ret := _m.Called(command)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(commands.OpenAccountCommand) (string, error)); ok {
		return rf(command)
	}
	if rf, ok := ret.Get(0).(func(commands.OpenAccountCommand) string); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(commands.OpenAccountCommand) error); ok {
		r1 = rf(command)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithdrawFund provides a mock function with given fields: command
func (_m *IAccountService) WithdrawFund(command commands.WithdrawFundCommand) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(commands.WithdrawFundCommand) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIAccountService interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAccountService creates a new instance of IAccountService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAccountService(t mockConstructorTestingTNewIAccountService) *IAccountService {
	mock := &IAccountService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
